{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","symbol","setSymbol","chartData","setData","apiData","setApiData","startDate","setStartDate","endDate","setEndDate","useForm","handleSubmit","control","useEffect","sd","Date","toString","res1","getFullYear","getMonth","getDate","ed","res2","it","setDate","res","array_labels","array_data","key","console","log","push","parseFloat","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","getAverage","className","id","onSubmit","e","preventDefault","fetch","then","response","status","json","error","type","placeholder","value","onChange","target","name","render","onBlur","dateFormat","selected","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.f8cae45f.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport './Stock.css';\nimport {Line} from 'react-chartjs-2';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nexport default function App() {\n    const [symbol, setSymbol] = useState('');\n    const [chartData, setData] = useState({});\n    const [apiData, setApiData] = useState({});\n    const [startDate, setStartDate] = useState(null);\n    const [endDate, setEndDate] = useState(null);\n    const { handleSubmit, control } = useForm();\n\n\n    const handleSubmitSymbol =(e) =>{\n        e.preventDefault();\n        fetchApi();\n        // getAverage();\n        console.log(symbol);\n    };\n\n    function fetchApi() {\n       fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${symbol}&outputsize=compact&apikey=5CIMSF66Q8D8J60O`)\n           .then(function(response){\n               if(response.status === 200){\n                   return response.json();\n               }else if(response.status !== 200){\n                   return response.error();\n               }\n           })\n           .then(function(data){\n               setApiData(data);\n               let array_labels = [];\n               let array_data = [];\n                for (let key in data['Time Series (Daily)']) {\n                    array_labels.push(key);\n                    array_data.push(parseFloat(data['Time Series (Daily)'][key]['1. open']));\n                }\n                setData({\n                    labels: array_labels,\n                    datasets: [{\n                        label: 'Stock Price',\n                        fill: false,\n                        lineTension: 0.1,\n                        backgroundColor: 'rgba(75,192,192,0.4)',\n                        borderColor: 'rgba(75,192,192,1)',\n                        borderCapStyle: 'butt',\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        borderJoinStyle: 'miter',\n                        pointBorderColor: 'rgba(75,192,192,1)',\n                        pointBackgroundColor: '#1c49ff',\n                        pointBorderWidth: 1,\n                        pointHoverRadius: 5,\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\n                        pointHoverBorderWidth: 2,\n                        pointRadius: 1,\n                        pointHitRadius: 20,\n                        data: array_data,\n                    }]\n                })\n\n           })\n    }\n\n    function getAverage(){\n        if(startDate !== null && endDate !== null) {\n            let sd = new Date(startDate.toString());\n            let res1 = sd.getFullYear() + '-' + (\"0\" + (sd.getMonth() + 1)) + '-' + ('0' + sd.getDate());\n\n            let ed = new Date(endDate.toString());\n            let res2 = ed.getFullYear() + '-' + (\"0\" + (ed.getMonth() + 1)) + '-' + ('0' + ed.getDate());\n\n            let res = 0;\n            for (let it = sd; it <= ed; it.setDate(it.getDate() + 1)) {\n                res++;\n            }\n\n            let array_labels = [];\n            let array_data = [];\n            for (let key in apiData['Time Series (Daily)']) {\n\n                    console.log(key)\n                if (key >= res1.toString() && key <= res2.toString()){\n                    array_labels.push(key);\n                    array_data.push(parseFloat(apiData['Time Series (Daily)'][key]['1. open']));\n                }\n            }\n            setData({\n                labels: array_labels,\n                datasets: [{\n                    label: 'Stock Price',\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(75,192,192,0.4)',\n                    borderColor: 'rgba(75,192,192,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#1c49ff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 20,\n                    data: array_data,\n                }]\n            })\n\n            console.log(array_labels);\n            console.log(array_data);\n        }\n\n    }\n    //\n    useEffect(() =>{\n     getAverage();\n    }, [startDate, endDate]);\n\n\n    //     // setData({\n    {/*    //     labels: array_labels,*/}\n    {/*    //     datasets: [{*/}\n    {/*    //         label: 'Stock Price',*/}\n    {/*    /!*        fill: false,*!/*/}\n\n    //     //         lineTension: 0.1,\n    //     //         backgroundColor: 'rgba(75,192,192,0.4)',\n    //     //         borderColor: 'rgba(75,192,192,1)',\n    //     //         borderCapStyle: 'butt',\n    {/*    //         borderDash: [],*/}\n    {/*    //         borderDashOffset: 0.0,*/}\n    //     //         borderJoinStyle: 'miter',\n    //     //         pointBorderColor: 'rgba(75,192,192,1)',\n    //     //         pointBackgroundColor: '#1c49ff',\n    //     //         pointBorderWidth: 1,\n    //     //         pointHoverRadius: 5,\n    //     //         pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n    //     //         pointHoverBorderColor: 'rgba(220,220,220,1)',\n    //     //         pointHoverBorderWidth: 2,\n    //     //         pointRadius: 1,\n    //     //         pointHitRadius: 20,\n    //     //         data: array_data,\n    //     //     }]\n    //     // })\n    //\n    // }, [startDate, endDate]);\n\n    return (\n        <div className=\"stock\">\n            <div className=\"fixed\">\n                <h1 id=\"title\">Welcome to Stock Web App!</h1>\n            </div>\n\n            <div className=\"row\">\n                <div className=\"col-8\">\n                    <div id=\"chart\">\n                        <Line data={chartData}/>\n                        {/*<button className={\"btn btn-primary\"} onClick={this.handleClick}>Show Average</button>*/}\n                    </div>\n                </div>\n                <div className=\"col-4\">\n                    <h4 className=\"symbol\">First enter a symbol:</h4>\n                    <form onSubmit={handleSubmitSymbol} id={\"#exampleFormControlSelect1\"}>\n                        <input className={\"form-control\"} type='text' placeholder={\"Enter a symbol\"} value={symbol} onChange={(e) => setSymbol(e.target.value)}/>\n                    </form>\n                    <label className={'form-date'}>Customize your date:</label>\n                    <form className={'form-date'} onSubmit={handleSubmit(data => {setStartDate(data['Start date']); setEndDate(data['End date'])})}>\n                        <label>Start Date:</label>\n                        <Controller\n                            control={control}\n                            name=\"Start date\"\n                            render={({ onChange, onBlur, value}) => (\n                                <DatePicker\n                                    dateFormat=\"yyyy-MM-dd\"\n                                    onChange={onChange}\n                                    onBlur={onBlur}\n                                    selected={value}\n                                />\n                            )}\n                        />\n                        <label>End Date:</label>\n                        <Controller\n                            control={control}\n                            name=\"End date\"\n                            render={({ onChange, onBlur, value}) => (\n                                <DatePicker\n                                    dateFormat=\"yyyy-MM-dd\"\n                                    onChange={onChange}\n                                    onBlur={onBlur}\n                                    selected={value}\n                                />\n                            )}\n                        />\n                        <input className={\"btn btn-primary\"} type=\"submit\" />\n                    </form>\n                </div>\n            </div>\n        </div>\n    )\n}\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}