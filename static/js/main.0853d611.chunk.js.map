{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","symbol","setSymbol","chartData","setData","apiData","setApiData","Date","startDate","setStartDate","endDate","setEndDate","useForm","handleSubmit","control","formError","setFormError","dateError","setDateError","clicked","setClick","gatDate","result","undefined","sd","toString","res1","res2","getDate","getFullYear","getMonth","ed","push","useEffect","array_labels","array_data","it","parseFloat","console","log","labels","datasets","label","fill","lineTension","backgroundColor","borderColor","borderCapStyle","borderDash","borderDashOffset","borderJoinStyle","pointBorderColor","pointBackgroundColor","pointBorderWidth","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius","data","getTimeInterval","contor","sum","dataAvg","key","avg","i","getAverage","className","id","onClick","onSubmit","e","preventDefault","fetch","then","response","status","json","error","type","placeholder","value","onChange","target","required","name","render","onBlur","dateFormat","selected","isClearable","minDate","maxDate","showDisabledMonthNavigation","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.0853d611.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport './Stock.css';\nimport {Line} from 'react-chartjs-2';\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { useForm, Controller } from \"react-hook-form\";\n\nexport default function App() {\n    const [symbol, setSymbol] = useState('');\n    const [chartData, setData] = useState({});\n    const [apiData, setApiData] = useState({});\n    const [startDate, setStartDate] = useState(new Date());\n    const [endDate, setEndDate] = useState(new Date());\n    const {handleSubmit, control} = useForm();\n    const [formError, setFormError] = useState('');\n    const [dateError, setDateError] = useState('');\n    const [clicked, setClick] = useState(false);\n\n    const handleChange =  (e) =>{\n        setSymbol(e.target.value);\n    };\n\n    const handleSubmitSymbol = (e) => {\n        e.preventDefault();\n        fetchApi();\n    };\n\n    const handleClick = () => {\n        if (!clicked) {\n            setClick(true);\n        } else {\n            setClick(false);\n        }\n    };\n\n    function fetchApi() {\n        fetch(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED&symbol=${symbol}&outputsize=compact&apikey=5CIMSF66Q8D8J60O`)\n            .then(function (response) {\n                if (response.status === 200) {\n                    return response.json();\n                } else if (response.status !== 200) {\n                    return response.error();\n                }\n            })\n            .then(function (data) {\n                console.log(data)\n                if (data['Error Message']) {\n                    setFormError('Your symbol is incorrect. Please try another symbol!');\n                } else {\n                    setFormError('');\n                }\n                setApiData(data);\n                let array_labels = [];\n                let array_data = [];\n                for (let key in data['Time Series (Daily)']) {\n                    array_labels.push(key);\n                    array_data.push(parseFloat(data['Time Series (Daily)'][key]['1. open']));\n                }\n                setData({\n                    labels: array_labels,\n                    datasets: [{\n                        label: 'Stock Price ' + symbol,\n                        fill: false,\n                        lineTension: 0.1,\n                        backgroundColor: 'rgba(75,192,192,0.4)',\n                        borderColor: 'rgba(75,192,192,1)',\n                        borderCapStyle: 'butt',\n                        borderDash: [],\n                        borderDashOffset: 0.0,\n                        borderJoinStyle: 'miter',\n                        pointBorderColor: 'rgba(75,192,192,1)',\n                        pointBackgroundColor: '#1c49ff',\n                        pointBorderWidth: 1,\n                        pointHoverRadius: 5,\n                        pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                        pointHoverBorderColor: 'rgba(220,220,220,1)',\n                        pointHoverBorderWidth: 2,\n                        pointRadius: 1,\n                        pointHitRadius: 20,\n                        data: array_data,\n                    }]\n                })\n            })\n    }\n\n    function gatDate()\n    {\n        let result = [];\n        if (startDate !== undefined && endDate !== undefined){\n            let sd = new Date(startDate.toString());\n            let res1 = '';\n            let res2 = '';\n            if (sd.getDate() < 10) {\n                res1 = sd.getFullYear() + '-' + (\"0\" + (sd.getMonth() + 1)) + '-' + ('0' + sd.getDate());\n            } else {\n                res1 = sd.getFullYear() + '-' + (\"0\" + (sd.getMonth() + 1)) + '-' + (sd.getDate());\n            }\n            let ed = new Date(endDate.toString());\n\n            if (ed.getDate() < 10) {\n                res2 = ed.getFullYear() + '-' + (\"0\" + (ed.getMonth() + 1)) + '-' + ('0' + ed.getDate());\n            } else {\n                res2 = ed.getFullYear() + '-' + (\"0\" + (ed.getMonth() + 1)) + '-' + ed.getDate();\n            }\n            result.push(res1);\n            result.push(res2);\n            setDateError('');\n        }else{\n            setDateError('You must select an interval!');\n        }\n        return result;\n    }\n\n    function getTimeInterval() {\n        let result = gatDate();\n        let res1 = result[0];\n        let res2 = result[1];\n        let array_labels = [];\n        let array_data = [];\n        for (let it in apiData['Time Series (Daily)']) {\n            if (res2 >= it && it >= res1) {\n                array_labels.push(it);\n                array_data.push(parseFloat(apiData['Time Series (Daily)'][it]['1. open']));\n                console.log(array_labels)\n            }\n        }\n        setData({\n            labels: array_labels,\n            datasets: [{\n                label: 'Stock Price ' + symbol,\n                fill: false,\n                lineTension: 0.1,\n                backgroundColor: 'rgba(75,192,192,0.4)',\n                borderColor: 'rgba(75,192,192,1)',\n                borderCapStyle: 'butt',\n                borderDash: [],\n                borderDashOffset: 0.0,\n                borderJoinStyle: 'miter',\n                pointBorderColor: 'rgba(75,192,192,1)',\n                pointBackgroundColor: '#1c49ff',\n                pointBorderWidth: 1,\n                pointHoverRadius: 5,\n                pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                pointHoverBorderColor: 'rgba(220,220,220,1)',\n                pointHoverBorderWidth: 2,\n                pointRadius: 1,\n                pointHitRadius: 20,\n                data: array_data,\n            }]\n        })\n    }\n\n    function getAverage() {\n        if (clicked === true) {\n            let result = gatDate();\n            let res1 = result[0];\n            let res2 = result[1];\n            let contor = 0;\n            let sum = 0;\n            let dataAvg = [];\n            let array_labels = [];\n            let array_data = [];\n\n            for (let key in apiData['Time Series (Daily)']) {\n                if (key <= res2 && key >= res1) {\n                    array_labels.push(key);\n                    console.log(array_labels);\n                    array_data.push(parseFloat(apiData['Time Series (Daily)'][key]['1. open']));\n                    sum += parseFloat(apiData['Time Series (Daily)'][key]['1. open']);\n                    contor++;\n                }\n            }\n\n            let avg = sum / contor;\n            for (let i = 0; i < contor; i++) {\n                dataAvg.push(avg);\n            }\n            setData({\n                labels: array_labels,\n                datasets: [{\n                    label: 'Stock Price ' + symbol,\n                    fill: false,\n                    lineTension: 0.1,\n                    backgroundColor: 'rgba(75,192,192,0.4)',\n                    borderColor: 'rgba(75,192,192,1)',\n                    borderCapStyle: 'butt',\n                    borderDash: [],\n                    borderDashOffset: 0.0,\n                    borderJoinStyle: 'miter',\n                    pointBorderColor: 'rgba(75,192,192,1)',\n                    pointBackgroundColor: '#1c49ff',\n                    pointBorderWidth: 1,\n                    pointHoverRadius: 5,\n                    pointHoverBackgroundColor: 'rgba(75,192,192,1)',\n                    pointHoverBorderColor: 'rgba(220,220,220,1)',\n                    pointHoverBorderWidth: 2,\n                    pointRadius: 1,\n                    pointHitRadius: 20,\n                    data: array_data,\n                },\n                    {\n                        label: 'Average',\n                        fill: false,\n                        backgroundColor: 'rgba(61,192,76,0.4)',\n                        borderColor: 'rgb(61,192,76)',\n                        data: dataAvg,\n                    }]\n            });\n        }\n    }\n\n    useEffect(() => {\n        getTimeInterval();\n    }, [startDate, endDate]);\n\n    useEffect(() => {\n        getAverage();\n        setClick(false);\n    }, [clicked, startDate, endDate]);\n\n        return (\n            <div className=\"stock\">\n                <div className=\"fixed\">\n                    <h1 id=\"title\">Welcome to Stock Web App!</h1>\n                </div>\n\n                <div className=\"row\">\n                    <div className=\"col-8\">\n                        <div id=\"chart\">\n                            <Line data={chartData}/>\n                            <button className={'btn btn-primary'} onClick={handleClick}>Calculate Average</button>\n                        </div>\n                    </div>\n                    <div className=\"col-4\">\n                        <h4 className=\"symbol\">First enter a symbol:</h4>\n                        <form onSubmit={handleSubmitSymbol} id={\"#exampleFormControlSelect1\"}>\n                            <input className={\"form-control\"} type='text' placeholder={\"Enter a symbol\"} value={symbol}\n                                   onChange={handleChange} required/>\n                            <p className=\"error\"> {formError} </p>\n                            <input type={'submit'} value={'Submit symbol'} className={\"btn btn-primary\"} />\n                        </form>\n                        <label id={'date'}>Customize your date:</label>\n                        <form className={'form-date date'} onSubmit={handleSubmit(data => {\n                            setStartDate(data['Start date']);\n                            setEndDate(data['End date'])\n                        })}>\n                            <label>Start Date:</label>\n                            <Controller\n                                control={control}\n                                name=\"Start date\"\n                                required\n                                render={({onChange, onBlur, value}) => (\n                                    <DatePicker\n                                        dateFormat=\"yyyy-MM-dd\"\n                                        onChange={onChange}\n                                        onBlur={onBlur}\n                                        selected={value}\n                                        isClearable\n                                        minDate={new Date('2020-04-10')}\n                                        maxDate={new Date()}\n                                        showDisabledMonthNavigation\n                                    />\n                                )}\n                        />\n                            <label>End Date:</label>\n                            <Controller\n                                control={control}\n                                name=\"End date\"\n                                required\n                                render={({onChange, onBlur, value}) => (\n                                    <DatePicker\n                                        dateFormat=\"yyyy-MM-dd\"\n                                        isClearable\n                                        onChange={onChange}\n                                        onBlur={onBlur}\n                                        selected={value}\n                                        minDate={new Date('2020-04-10')}\n                                        maxDate={new Date()}\n                                        showDisabledMonthNavigation\n                                    />\n                                )}\n                            />\n                            <input className={\"btn btn-primary\"} id='submit' type=\"submit\" value={'Submit interval'}/>\n                            <p className=\"error\"> {dateError} </p>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}